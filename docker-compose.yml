version: "3.0"

services:
  db:
    container_name: "oes_db"
    build:
      context: .
      dockerfile: ./MySQL/Dockerfile
    networks:
      - default
    restart: always
    expose: ["3306"]
    # setting some env vars
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "OES"

      # we mount a data volume to make sure we don't lose data
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password

  cache:
    image: redis
    command: ["redis-server", "--bind", "cache", "--port", "6379"]
    expose: ["6379"]
    volumes:
      - cache_data:/var/lib/redis
    networks:
      - default

  server:
    container_name: "oes_server"
    # we want to use the image which is build from our Dockerfile
    build:
      context: .
      dockerfile: ./Server/Dockerfile
    expose: ["9000"]
    ports:
      - "9000:9000"
    # we are depending on the mysql(db) & redis (cache)
    depends_on:
      - db
      - cache
      - messageq
      - isupport

    networks:
      - default
    # We mount the working dir into the container, handy for development
    # This is what makes the hot reloading work inside of a Docker container
    volumes:
      - ./media:/app/OES/media
    restart: always

  fileserver:
    container_name: "oes_fileserver"
    # we want to use the image which is build from our Dockerfile
    build:
      context: .
      dockerfile: ./FileServer/Dockerfile
    expose: ["8887"]
    ports:
      - "8887:8887"
    networks:
      - default
    # We mount the working dir into the container, handy for development
    # This is what makes the hot reloading work inside of a Docker container
    volumes:
      - ./media:/app/OES/media
    restart: always

  client:
    container_name: "oes_client"
    build:
      context: .
      dockerfile: ./Client/Dockerfile
    networks:
      - default
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - server
      - fileserver
    links:
      - server
    sysctls:
      net.ipv4.ip_local_port_range: 10000 65535

  mqserver:
    container_name: "oes_mqserver"
    build:
      context: .
      dockerfile: ./MQServer/Dockerfile
    networks:
      - default
    volumes:
      - ./media:/app/OES/media
    restart: always
    depends_on:
      - messageq

  messageq:
    image: "rabbitmq:3-management-alpine"
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"

  isupport:
    container_name: "oes_isupport"
    ports:
      - "50051:50051"
    build:
      context: .
      dockerfile: ./IntelligenceSupport/questgen/Dockerfile
    networks:
      - default
    restart: always

  liveserver:
    container_name: "oes_liveserver"
    ports:
      - "1935:1935"
    build:
      context: .
      dockerfile: ./LiveStreamingServer/Dockerfile
    networks:
      - default
    volumes:
      - ./media/video/liveData:/mnt/hls
    restart: always

networks:
  default:
    driver: bridge
volumes:
  mysql_data:
  cache_data:
  file_data:
# docker-compose up --build
