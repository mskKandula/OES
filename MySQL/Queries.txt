show databases;

select database();

drop database OES;

create database OES;

use OES;

CREATE TABLE Examiners(  
    id int NOT NULL AUTO_INCREMENT,  
    name varchar(45) NOT NULL,
    age int,
    email varchar(45) NOT NULL,
    mobileNo varchar(45) NOT NULL,
    password varchar(100) NOT NULL,
    clientId varchar (100) NOT NULL,
    PRIMARY KEY (id)  
); 

select * from Examiners;

CREATE TABLE Students (  
    id int NOT NULL AUTO_INCREMENT,  
    name varchar(45) NOT NULL,
    email varchar(45) NOT NULL UNIQUE,
    mobileNo varchar(45) NOT NULL UNIQUE,
    password varchar(100) NOT NULL,
    clientId varchar(100) NOT NULL,
    PRIMARY KEY (id)  
); 

select * from Students;

CREATE TABLE Menu (  
    id int NOT NULL AUTO_INCREMENT,  
    name varchar(45) NOT NULL,
    url varchar(45) NOT NULL,
    description varchar(45) NOT NULL,
    PRIMARY KEY (id)  
); 

INSERT INTO Menu(name,url,description) VALUES
('Dashboard','/dashboard','Dashboard'),
('MultipleStudentsRegistration','/multipleStudentsRegistration','MultipleStudentsRegistration'),
('StudentsList','/studentsList','StudentsList'),
('Uploadquestions','/uploadQuestions','Uploadquestions'),
('UploadVideo','/uploadVideo','UploadVideo'),
('StudentDashboard','/studentDashboard','StudentDashboard'),('Exam','/onlineExam','Exam'),
('VideoContent','/fetchVideos','VideoContent'),('WhiteBoard','/whiteBoard','WhiteBoard');

select * from menu;

SET SQL_SAFE_UPDATES = 0;

select * from Menu;

show tables;

CREATE TABLE Role (  
    id int NOT NULL AUTO_INCREMENT,  
    name varchar(45) NOT NULL,
    PRIMARY KEY (id)  
);  

INSERT INTO Role(name) VALUES('Examiner'),('Student');

select * from Role;

CREATE TABLE UserRole (  
    userId int NOT NULL,  
    roleId int NOT NULL
);

CREATE TABLE RoleMenu (  
    roleId int NOT NULL,  
    menuId int NOT NULL
);

INSERT INTO roleMenu(roleId,menuId) VALUES(2,6),(2,7),(2,8),(2,9);

INSERT INTO roleMenu(roleId,menuId) VALUES(1,1),(1,2),(1,3),(1,4),(1,5),(1,9);

select * from roleMenu;

SELECT m.id,m.name,m.url,m.description FROM Role r
    INNER JOIN UserRole ur ON r.id = ur.roleId
	INNER JOIN RoleMenu rm ON ur.roleId = rm.roleId
	INNER JOIN menu m ON rm.menuId = m.id
	where ur.userId=? AND r.name=?;

DROP TABLE VideoContent;

CREATE TABLE VideoContent(
   id INT NOT NULL AUTO_INCREMENT,  
    NAME VARCHAR(45) NOT NULL,
    videoUrl VARCHAR(100) NOT NULL,
    thumbnailPath VARCHAR(100) NOT NULL,
    contentType VARCHAR(50) NOT NULL,
    description VARCHAR(100),
    clientId varchar(100) NOT NULL,
    PRIMARY KEY (id));
    
SELECT * FROM VideoContent where clientId = ?;


create table notifications(
    id INT
    body
    type
    clientId
    createdOn
)

select * from notifications where clientId=? order by createdOn Desc

create table ExamProofs(
id
imagePath
createdOn

)


create table sudentProofs(
    id
    studentId
    examId
    proofId
)


create table studentexam(
    id
    studentId
    examId
)

select * from exams es inner join studentexam se on es.id = se.examId where se.studentId=?

select * from students ss inner join studentexam  se on ss.id = se.studentId where se.examId =?

select * from examproofs ep inner join studentproofs sp on ep.id= sp.proofId where sp.examId = ? 

select * from examproofs ep inner join studentproofs sp on ep.id= sp.proofId where sp.studentId = ? 

select * from examproofs ep inner join studentproofs sp on ep.id= sp.proofId where sp.examId = ?  and sp.studentId =?


create table exam(
    id
    examType
    examName
    clientId
    createdOn
)

select * from exams where clientId =? order by createdOn Desc





create table messages(
    id
    body
    sender
    room

) 

create table questions(
    id
    questionText
    questionType
    clientId
    createdOn
    createdBy
)

create table ExamQuestions(
    examId
    questionId
)


create table VideoQuestions(
    examId
    videoId
    questionId
    atTime


)